from aiogram import Router, F, types, Bot
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import os

import handlers.keyboards as kb
import database.database as bd

router = Router()

class Likes_state(StatesGroup):
    ank_id = State()
    accept_or_reject = State()
    username = State()
    stop_or_cont = State()

#–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π –∞–Ω–∫–µ—Ç—ã —é–∑–µ—Ä—É
@router.message(F.text == '–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã')
async def look_ankets(message: Message):
    ank = await bd.get_anket(message.from_user.id)
    if ank != 'no':
        faculty=ank[10]
        if faculty == 'LF':
            faculty = '–Æ–§'
        if faculty == 'FEIF':
            faculty = '–§–≠–ò–§'
        if faculty == 'GF':
            faculty = '–ì–§'
        if faculty == 'BTB':
            faculty = '–§–ë–¢–î–∏–≠–ë'
        if faculty == 'FIPM':
            faculty = '–§–ò–ü–ú'
        if faculty == 'FSTIG':
            faculty = '–§–°–¢–ò–ì'
        if faculty == 'FU':
            faculty = '–§–£'
        current_dir = os.path.split(os.path.dirname(__file__))[0] # –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        await message.answer_photo(photo=types.input_file.FSInputFile(f"{current_dir}/photos/{ank[6]}.jpg"), caption=f'üîé {ank[3]}, {ank[5]}, {ank[8]}\n\nüßëüèª‚Äçüéì –£—á–∏—Ç—Å—è –Ω–∞ {ank[9]} –∫—É—Ä—Å–µ {ank[11]} {faculty}\n\nüìé –û–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã: {ank[7]}', reply_markup=kb.view)
    else:
        await message.answer('–í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã. –í–æ–∑–º–æ–∂–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –∏—Ö –±—É–¥–µ—Ç –±–æ–ª—å—à–µ üòû', reply_markup=kb.last)

# –µ—Å–ª–∏ —é–∑–µ—Ä—É –Ω—Ä–∞–≤–∏—Ç—Å—è –∞–Ω–∫–µ—Ç–∞
@router.message(F.text == '–ù—Ä–∞–≤–∏—Ç—Å—è')
async def like(message: Message, bot: Bot):
    last_id = await bd.like_ank(message.from_user.id)
    await message.answer('üíå')
    try:
        await bot.send_message(chat_id=last_id, text="–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!\n–í–∞—à—É –∞–Ω–∫–µ—Ç—É –æ—Ü–µ–Ω–∏–ª–∏. –∑–∞–π–¥–∏—Ç–µ –≤ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å -> –ú–µ–Ω—è –æ—Ü–µ–Ω–∏–ª–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ —ç—Ç–æ")
        await message.answer('üíï')
    except:
        print(f'–£–≤—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {last_id} –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üò©')
    await bd.do_not_show(message.from_user.id)
    await look_ankets(message)

# –ø—Ä–æ–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã
@router.message(F.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
async def skip(message: Message):
    await bd.do_not_show(message.from_user.id)
    await message.answer('‚ùå')
    await look_ankets(message)

# –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.main)

# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∫–µ—Ç—É —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ü–µ–Ω–∏–ª —é–∑–µ—Ä–∞
async def ank_who_like(people_id, message, state, user_id):
    ank = await bd.like_person(people_id)
    current_dir = os.path.split(os.path.dirname(__file__))[0] # –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    await message.answer_photo(photo=types.input_file.FSInputFile(f"{current_dir}/photos/{ank[6]}.jpg"),
                                    caption=f'–ò–º—è: {ank[3]}\n–í–æ–∑—Ä–∞—Å—Ç: {ank[5]}\n–û–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã: {ank[7]}\n–ó–ó: {ank[8]}\n–ö—É—Ä—Å: {ank[9]}\n–§–∞–∫—É–ª—å—Ç–µ—Ç: {ank[10]}\n–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {ank[11]}',
                                    reply_markup=kb.who_like)
    stop_or_continue = await bd.delete_one_like(user_id)
    await state.set_state(Likes_state.accept_or_reject)
    await state.update_data(username=ank[1])
    await state.update_data(ank_id=people_id)
    if stop_or_continue == "cont":
        await state.update_data(stop_or_cont="cont")
    elif stop_or_continue == "stop":
        await state.update_data(stop_or_cont="stop")

# –∫—Ç–æ –æ—Ü–µ–Ω–∏–ª —é–∑–µ—Ä–∞
@router.message(F.text == '–ú–µ–Ω—è –æ—Ü–µ–Ω–∏–ª–∏')
async def my_likes(message: Message, state: FSMContext):
    like = await bd.who_like(message.from_user.id)
    if like == "no likes":
        await message.answer("–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –Ω–µ –ø—Ä–∏–±–∞–≤–∏–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ üò≠üò≠üò≠\n\n–ù–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫ –Ω–µ—Ç.")
    else:
        people_id = like[0]
        user_id = message.from_user.id
        await ank_who_like(people_id, message, state, user_id)

# –æ—Ç–≤–µ—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —é–∑–µ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã
@router.message(Likes_state.accept_or_reject)
async def accep_or_reject(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    data = await state.get_data()
    if message.text == "–û—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç–Ω–æ":
        people_id = data.get("ank_id")
        username = data.get("username")
        ank_id = data.get("ank_id")
        await message.answer(f"–í—ã –æ—Ü–µ–Ω–∏–ª–∏ @{username} –≤ –æ—Ç–≤–µ—Ç.\n\n–ú–æ–∂–µ—Ç –ø–æ—Ä–∞ –∑–∞–≤–æ–¥–∏—Ç—å –¥–µ—Ç–µ–π? üë∂")
        try:
            await bot.send_message(chat_id=ank_id, text = f"–û–≥–æ! –£ –≤–∞—Å —Å–ª—É—á–∏–ª—Å—è –º—ç—Ç—á! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –æ—Ü–µ–Ω–∏–ª –≤–∞—Å –≤ –æ—Ç–≤–µ—Ç.")
            await message.answer('üíû')
        except:
            print(f'–£–≤—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ank_id} –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üò©')
    elif message.text == "–°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞":
        await message.answer("–£–≤—ã, –≤—ã –Ω–µ –æ—Ü–µ–Ω–∏–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –æ—Ç–≤–µ—Ç. –ê –≤–µ–¥—å –æ–Ω –º–æ–∂–µ—Ç —É–π—Ç–∏ –≤ –¥–µ–ø—Ä–µ—Å—Å–∏—é üò≠\n–ù—É –ª–∞–¥–Ω–æ, –≤–æ—Ç —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞:")
    stop_or_cont = data.get("stop_or_cont")
    like = await bd.who_like(message.from_user.id)
    people_id = like[0]
    if stop_or_cont == "cont":
        await ank_who_like(people_id, message, state, user_id)
    elif stop_or_cont=="stop":
        await message.answer("–í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏. –¢—É—Ç –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç üòû", reply_markup=kb.main)
        await state.clear()